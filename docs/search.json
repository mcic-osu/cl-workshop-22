[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Workshop Schedule",
    "section": "",
    "text": "Day\nModule\nInstructor\nTime\n\n\n\n\nDay-1\nIntroduction to the workshop\nMike / Jelmer\nWed 1:00 - 1:15 pm\n\n\n\nThe Ohio Supercomputer Center\nMike\nWed 1:15 - 1:45 pm\n\n\n\nThe VS Code text editor\nJelmer\nWed 1:45 - 2:00 pm\n\n\n\nThe Unix shell\nMike\nWed 2:15 - 4:30 pm\n\n\nDay-2\nShell scripting\nJelmer\nThu 12:00 - 1:30 pm\n\n\n\nUsing software at OSC\nJelmer\nThu 1:45 - 2:30 pm\n\n\nDay-3\nSubmitting scripts with SLURM\nJelmer\nFri 1:00 - 2:30 pm\n\n\n\nRunning example compute jobs\nMike / Jelmer\nFri 2:45 - 4:30 pm"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Command line basics  for genomic analysis at OSC",
    "section": "",
    "text": "Day\nModule\nInstructor\nTime\n\n\n\n\nDay-1\n1. Introduction to the workshop\nMike / Jelmer\nWed 1:00 - 1:15 pm\n\n\n\n2. The Ohio Supercomputer Center\nMike\nWed 1:15 - 1:45 pm\n\n\n\n3. The VS Code text editor\nJelmer\nWed 1:45 - 2:00 pm\n\n\n\n4. The Unix shell\nMike\nWed 2:15 - 4:30 pm\n\n\nDay-2\n5. Variables, loops, and conditionals\nJelmer\nThu 12:00 - 12:45 pm\n\n\n\n6. Shell scripting\nJelmer\nThu 12:45 - 1:30 pm\n\n\n\n7. Using software at OSC\nJelmer\nThu 1:45 - 2:30 pm\n\n\nDay-3\n8. Submitting scripts with SLURM\nJelmer\nFri 1:00 - 2:30 pm\n\n\n\n9. Running example compute jobs\nMike / Jelmer\nFri 2:45 - 4:30 pm"
  },
  {
    "objectID": "index.html#locations",
    "href": "index.html#locations",
    "title": "Command line basics  for genomic analysis at OSC",
    "section": "Locations",
    "text": "Locations\n\nWooster: Selby Hall 203 (instructor: Jelmer Poelstra)\nColumbus: Aronoff Laboratory 104 (instructor: Mike Sovic)\nZoom: email us for the link!"
  },
  {
    "objectID": "sessions/vscode.html",
    "href": "sessions/vscode.html",
    "title": "The VS Code Text Editor",
    "section": "",
    "text": "In this module, we will learn the basics of a fancy text editor called Visual Studio Code (VS Code for short). Conveniently, we can use a version of this editor (sometimes referred to as Code Server) in our browser via the OSC OnDemand website.\nWe will use VS Code throughout the workshop as practically a one-stop solution for our computing activities at OSC: accessing the Unix shell and writing scripts. This is also how I use this editor in my daily work.\nTo emphasize its additional functionality relative to basic text editors like Notepad and TextEdit, editors like VS Code are also referred to as “IDEs”: Integrated Development Environments. If you’ve ever worked with R, the RStudio program is another good example of an IDE."
  },
  {
    "objectID": "sessions/vscode.html#starting-vs-code-at-osc",
    "href": "sessions/vscode.html#starting-vs-code-at-osc",
    "title": "The VS Code Text Editor",
    "section": "1 Starting VS Code at OSC",
    "text": "1 Starting VS Code at OSC\n\nLog in to OSC’s OnDemand portal at https://ondemand.osc.edu.\nIn the blue top bar, select Interactive Apps and then near the bottom of the dropdown menu, click Code Server.\nIn the form that appears on a new page:\n\nEnter 3 in the box Number of hours\nEnter /fs/ess/scratch/PAS2250 in the box Working Directory\nClick Launch.\n\nOn the next page, once the top bar of the box has turned green and says Runnning, click Connect to VS Code.\n\n\n\n\n\n\n\n\n\n\nVS Code runs on a login node\n\n\n\nIn the previous module, we’ve learned that all serious computation at OSC should not be done on login nodes but on compute nodes.\nStarting an RStudio session, for instance, requires filling out a similar form, and RStudio will subsequently run on a compute node and your selected OSC project will be charged.\nRunning VS Code is a slightly peculiar case: we do have to fill out a form and reserve a pre-specified number of hours (and it will stop working after the allotted time has passed), but we’re on a login node and are not being charged."
  },
  {
    "objectID": "sessions/vscode.html#getting-started-with-vs-code",
    "href": "sessions/vscode.html#getting-started-with-vs-code",
    "title": "The VS Code Text Editor",
    "section": "2 Getting started with VS Code",
    "text": "2 Getting started with VS Code\n\n\n\n\n2.1 Side bars\nThe narrow side bar serves mainly to switch between different options for the wide side bar, which can show:\n\nExplorer: File browser (and, e.g., an outline for the active file)\nSearch: To search recursively across all files in the active folder\nSource Control: To work with version control systems like Git (not used in this workshop)\nRun and Debug: For debugging your code (not used in this workshop)\nExtensions: To install extensions\n\n\n\n2.2 Editor pane and Welcome document\nThe main part of the VS Code is the editor pane. Whenever you open VS Code, a tab with a Welcome document is automatically opened. This provides some help for beginners, but also, for example, an overview of recently opened folders.\nWe can also use the Welcome document to open a new text file by clicking New file below Start (alternatively, click      =>   File   =>   New File). We’ll work with files starting tomorrow, but if you want, you could already start a file with notes on the workshop now.\n\n\n\n\n\n\nRe-open the Welcome document\n\n\n\nIf you’ve closed the Welcome document but want it back, click      =>   Help   =>   Welcome.\n\n\n\n\n2.3 Terminal\nBy default, no terminal is open in VS Code – to do so, click the      (“hamburger menu” icon) that is way in the top left, and then Terminal => New Terminal.\nIn the terminal, the prompt says Singularity>. This is because in OSC OnDemand, VS Code runs inside a Singularity container (for our purposes, it is not important what that means, exactly). To break out of the Singularity shell and get a regular Bash Unix shell, type bash and press Enter.\nIn the next module, Mike will teach us how to use the terminal."
  },
  {
    "objectID": "sessions/vscode.html#working-directory",
    "href": "sessions/vscode.html#working-directory",
    "title": "The VS Code Text Editor",
    "section": "4 Working directory",
    "text": "4 Working directory\nSetting a “working directory” means that you designate a folder on a computer as the starting point for any operation.\nVS Code has a concept of a working directory that is effective in all parts of the program: in the file explorer in the side bar, in the terminal, and when saving or opening files in the editor.\nIn this workshop, we’ll exclusively work within the folder /fs/ess/scratch/PAS2250. By opening this folder beforehand (we did this in the form on the OnDemand site), we make sure that VS Code always takes this folder as a starting point, which will make navigation and saving files much easier.\n\n\n\n\n\n\nSwitching folders\n\n\n\nTo switch to a different folder from within VS Code, click      =>   File   =>   Open Folder.\n\n\n\n\n\n\n\n\nTip\n\n\n\n“Folder” and “directory” mean the same thing, and the latter is most commonly used in the contect of the Unix Shell."
  },
  {
    "objectID": "sessions/vscode.html#addendum-keyboard-shortcuts",
    "href": "sessions/vscode.html#addendum-keyboard-shortcuts",
    "title": "The VS Code Text Editor",
    "section": "5 Addendum: keyboard shortcuts",
    "text": "5 Addendum: keyboard shortcuts\nWorking with keyboard shortcuts (also called “keybindings”) for common operations can be a lot faster than using your mouse. Here are some useful ones for VS Code (if you have a Mac, replace Ctrl by ⌘):\n\nToggle the wide side bar: Ctrl+B\nOpen a terminal: Ctrl+` or Ctrl+Shift+C.\nToggle between the terminal and the editor pane: Ctrl+` and Ctrl+1.\nLine actions:\n\nCtrl+X / C will cut/copy the entire line where the cursor is, when nothing is selected (!)\nCtrl+Shift+K will delete a line\nAlt+⬆/⬇ will move lines up or down.\n\nMultiple cursors: Press & hold Ctrl+Shift, then ⬆/⬇ arrows to add cursors upwards or downwards.\nToggle line comment (“comment out” code, and removing those comment signs): Ctrl+/\nSplit the editor window vertically: Ctrl+\\ (See also the options in      View => Editor Layout)\n\n\n\n\n\n\n\nKeyboard shortcut cheatsheet\n\n\n\nFor a single-page PDF overview of keyboard shortcuts for your operating system:      =>   Help   =>   Keyboard Shortcut Reference. (Or for direct links to these PDFs: Windows / Mac / Linux.)\n\n\n\n\n\n\n\n\nBrowser interference\n\n\n\nUnfortunately, some VS Code and terminal keyboard shortcuts don’t work in this setting where we are using VS Code inside a browser, because existing browser keyboard shortcuts take precedence.\nIf you end up using VS Code a lot in your work, it is therefore worth switching to your own installation of the program (see At-home bonus: local installation)"
  },
  {
    "objectID": "sessions/vscode.html#at-home-bonus-local-installation",
    "href": "sessions/vscode.html#at-home-bonus-local-installation",
    "title": "The VS Code Text Editor",
    "section": "6 At-home bonus: local installation",
    "text": "6 At-home bonus: local installation\nAnother nice feature of VS Code is that it is freely available for all operating systems (and even though it is made by Microsoft, it is also open source).\nTherefore, if you like the program, you can also install it on your own computer and do your local text editing / script writing in the same environment at OSC (it is also easy to install on OSU-managed computers, because it is available in the Self Service software installer).\nEven better, the program can be “tunneled into” OSC, so that your working directory for the entire program can be at OSC rather than on your local computer. This gives the same experience as using VS Code through OSC OnDemand, except that you’re not working witin a browser window, which has some advantages (also: no need to fill out a form, or to break out of the Singularity shell).\nFor installation and SSH-tunneling setup, see this page - TBA."
  },
  {
    "objectID": "sessions/shell-scripting.html#tba",
    "href": "sessions/shell-scripting.html#tba",
    "title": "Shell Scripting",
    "section": "1 TBA",
    "text": "1 TBA\n\n\n\n\n\n\nKeyboard shortcut to run shell commands from the editor\n\n\n\nTo add a keyboard shortcut that will send code selected in the editor pane to the terminal (such that you don’t have to copy and paste):\n\nClick the      (bottom-left) => Keyboard Shortcuts.\nFind Terminal: Run Selected Text in Active Terminal, click on it, then add a shortcut, e.g. Ctrl+Enter."
  },
  {
    "objectID": "sessions/software.html#tba",
    "href": "sessions/software.html#tba",
    "title": "Using Software at OSC",
    "section": "1 TBA",
    "text": "1 TBA"
  },
  {
    "objectID": "sessions/scripting-prep.html",
    "href": "sessions/scripting-prep.html",
    "title": "Variables, Loops, and Conditionals",
    "section": "",
    "text": "In this session, we will cover several topics to set the scene for writing and running shell scripts: variables, for loops, and conditionals (if constructs)."
  },
  {
    "objectID": "sessions/scripting-prep.html#before-we-get-started",
    "href": "sessions/scripting-prep.html#before-we-get-started",
    "title": "Variables, Loops, and Conditionals",
    "section": "1 Before We Get Started",
    "text": "1 Before We Get Started\n\n1.1 Goals\n\nLearn how to use variables\nLearn how to use for loops to …\nLearn about “conditionals”: if constructs to …\n\n\n\n1.2 Setup\n\nLog in to OSC at https://ondemand.osc.edu.\nIn the blue top bar, select Interactive Apps and then Code Server.\nIn the form that appears:\n\nEnter 3 in the box Number of hours\nEnter /fs/ess/scratch/PAS2250 in the box Working Directory\nClick Launch.\n\nOn the next page, once the top bar of the box has turned green and says Runnning, click Connect to VS Code.\nOpen a terminal by clicking the “hamburger menu” way in the top left, and then Terminal > New Terminal.\nIn the terminal, type Bash and press Enter."
  },
  {
    "objectID": "sessions/scripting-prep.html#variables",
    "href": "sessions/scripting-prep.html#variables",
    "title": "Variables, Loops, and Conditionals",
    "section": "2 Variables",
    "text": "2 Variables\nIn programming, we use variables for things that:\n\nWe refer to repeatedly and/or\nAre subject to change.\n\nThese tend to be settings like the paths to input and output files, and parameter values for programs. (As we’ll see, the use of variables also allows us to pass outside information to a script, so that we can run the same script for different files.)\n\n2.1 Assigning and referencing variables\nTo assign a value to a variable in Bash (in short: to assign a variable), you use the syntax variable=value. Be aware that there can be no spaces around the equal sign =! For example:\n\ntreatment=low\n\nnlines=200\n\nTo reference a variable (i.e., to access its value), you need to put a dollar sign $ in front of its name! We’ll use the echo command to see what values our variables holds:\n\necho $treatment\n\n\n\nlow\n\n\n\necho $nlines\n\n\n\n200\n\n\nConveniently, we can directly use variables in lots of contexts, as if we had just typed their values:\n\nls_options=\"-lh\"\n\nls $ls_options\n\ntotal 132K\n-rw-rw-r-- 1 jelmer jelmer  232 Aug  9 21:42 examples.qmd\ndrwxrwxr-x 2 jelmer jelmer 4.0K Aug 10 15:09 img\n-rw-rw-r-- 1 jelmer jelmer  248 Aug  9 21:42 osc-intro.qmd\n-rw-rw-r-- 1 jelmer jelmer  11K Aug 10 10:27 scripting-prep.qmd\n-rw-rw-r-- 1 jelmer jelmer  11K Aug 10 15:48 scripting-prep.rmarkdown\n-rw-rw-r-- 1 jelmer jelmer  218 Aug  9 21:43 shell-intro.qmd\n-rw-rw-r-- 1 jelmer jelmer  16K Aug 10 15:48 shell-scripting.html\n-rw-rw-r-- 1 jelmer jelmer  654 Aug 10 15:35 shell-scripting.qmd\n-rw-rw-r-- 1 jelmer jelmer  235 Aug  9 21:44 slurm.qmd\n-rw-rw-r-- 1 jelmer jelmer  15K Aug 10 15:48 software.html\n-rw-rw-r-- 1 jelmer jelmer  225 Aug  9 21:45 software.qmd\n-rw-rw-r-- 1 jelmer jelmer  31K Aug 10 15:48 vscode.html\n-rw-rw-r-- 1 jelmer jelmer 9.2K Aug 10 15:35 vscode.qmd\n-rw-rw-r-- 1 jelmer jelmer  232 Aug  9 21:46 workshop-intro.qmd\n\n\n\ninput_file=shell-scripting.qmd\n\nls -lh $input_file \n\n-rw-rw-r-- 1 jelmer jelmer 654 Aug 10 15:35 shell-scripting.qmd\n\n\n\n\n2.2 Rules for naming variables\nVariable names:\n\nCan contain letters, numbers, and underscores\nCannot contain spaces, periods, or other special symbols\nCannot start with a number\n\n\n\n2.3 Command substitution\nIf you want to store the result of a command in a variable, you can use a construct called “command substitution” by wrapping the command inside $():\n\ntoday=$(date +%F)\n\ntouch README_$today.txt\nls README_*\n\nREADME_2022-08-10.txt\n\n\n\ninput_file=shell-scripting.qmd\n\nnlines=$(wc -l < $input_file)\n\necho \"The file $input_file has $nlines lines\"\n\nThe file shell-scripting.qmd has 28 lines\n\n\nCommand substitution can for instance be useful when you want your script to report some results, or when a next step in the script depends on a previous result.\n\n\n2.4 Environment variables\nThere are also predefined variables in the Unix shell: that is, variables that exist in your environment by default. These so-called “environment variables” are always in all-caps:\n\n# Environment variable $USER contains your user name \necho $USER\n\njelmer\n\n\n\n# Environment variable $HOME contains the path to your home directory\necho $HOME\n\n/home/jelmer\n\n\nEnvironment variables can provide useful information. We’ll see them again when we talk about the SLURM compute job scheduler.\n\n\n2.5 Quoting variables\nWhat happens if the value of our variable contains spaces?\nFirst off, when we try to assign the variable without quotes, we get an error:\n\ntoday=Thu, Aug 18\n#> Aug: command not found\n\nBut it works when we quote the entire string that makes up the value:\n\ntoday=\"Thu, Aug 18\"\necho $today\n\nThu, Aug 18\n\n\nNow, let’s try to reference the variable with spaces:\n\ntouch README2_$today.txt\nls README2_*\n\n\n\nREADME2_Thu,\n\n\nOops! The shell performed field splitting on the spaces to split the value into three separate units – as a result, three files were created: README2_Thu, (listed above), as well as Aug and 18.txt (not shown).\nSimilar to what we had to do when assigning the variable, problems can be avoided by quoting the variable when we reference it:\n\ntouch README3_\"$today\".txt\nls README3_*\n\n\n\nREADME3_Thu, Aug 18.txt\n\n\nAnother issue we can run into when we don’t quote variables is that we can’t explicitly define where a variable name ends within a longer string of text:\n\necho README_$today_final.txt\n\n\n\nREADME_.txt\n\n\n\n\n\n\n\n\nWhat is going wrong here?\n\n\n\n\n\n\nFollowing a $, the shell will stop interpreting characters as being part of the variable name only when it encounters a character that cannot be part of a variable name, such as a space or a period.\nSince variable names can contain underscores, it will look for the variable $today_final, which does not exist.\nImportantly, the shell does not error out when you reference a non-existing variable – it basically ignores it, such that README_$today_final.txt becomes README_.txt, as if we hadn’t referenced any variable.\n\n\n\n\nQuoting solves this issue, too:\n\necho README_\"$today\"_final.txt\n\n\n\nREADME_Thu, Aug 18_final.txt\n\n\n\n\n\n\n\n\nTip\n\n\n\nAll in all, it is good practice to quote variables when you reference them: it never hurts and avoids unexpected surprises."
  },
  {
    "objectID": "sessions/scripting-prep.html#for-loops",
    "href": "sessions/scripting-prep.html#for-loops",
    "title": "Variables, Loops, and Conditionals",
    "section": "3 For loops",
    "text": "3 For loops\nLoops are a universal element of programming languages, and are extremely useful to repeat operations, such as when you want to run the same script or command for multiple files.\nHere, we’ll only cover what is by far the most common type of loop: the for loop.\nfor loops iterate over a collection, such as a list of files: that is, they allow you to perform one or more actions for each element in the collection, one element at a time.\n\n3.1 for loop syntax and mechanics\nLet’s see a first example, where our collection is just a list of numbers:\n\nfor a_number in 1 2 3; do\n    echo \"In this iteration of the loop, the number is $a_number\"\n    echo \"--------\"\ndone\n\nIn this iteration of the loop, the number is 1\n--------\nIn this iteration of the loop, the number is 2\n--------\nIn this iteration of the loop, the number is 3\n--------\n\n\nfor loops contain the following mandatory keywords:\n\n\n\n\n\n\n\nKeyword\nPurpose\n\n\n\n\nfor\nAfter for, we set the variable name\n\n\nin\nAfter in, we specify the collection we are looping over\n\n\ndo\nAfter do, we have one ore more lines specifying what to do with each item\n\n\ndone\nTells the shell we are done with the loop\n\n\n\n\n\n\n\n\n\nWhy the semicolon ; before do?\n\n\n\n\n\nA semicolon separates two commands written on a single line – for instance, instead of:\n\nmkdir results\ncd results\n\n…you could equivalently type:\n\nmkdir results; cd results\n\nThe ; in the for loop syntax has the same function, and as such, an alternative way to format a for loop is:\n\nfor a_number in 1 2 3\ndo\n    echo \"In this iteration of the loop, the number is $a_number\"\ndone\n\nBut that’s one line longer and a bit awkwardly asymmetric.\n\n\n\nIt is important to realize that the loop runs sequentially for each item in the collection, and will therefore run as many times as there are items in the collection.\nThe following example, where we let the computer sleep for 1 second before printing the date and time with the date command, demonstrates that the loop is being executed sequentially:\n\nfor a_number in 1 2 3; do\n    echo \"In this iteration of the loop, the number is $a_number\"\n    sleep 1s          # Let the computer sleep for 1 second\n    date              # Print the date and time\n    echo \"--------\"\ndone\n\nIn this iteration of the loop, the number is 1\nWed Aug 10 03:48:36 PM CEST 2022\n--------\nIn this iteration of the loop, the number is 2\nWed Aug 10 03:48:37 PM CEST 2022\n--------\nIn this iteration of the loop, the number is 3\nWed Aug 10 03:48:38 PM CEST 2022\n--------\n\n\nThe aspect that is perhaps most difficult to understand is that in each iteration of the loop, one element in the collection (in the example above, either 1, 2, or 3) is being assigned to the variable specified after for (in the example above, a_number).\nWhen we specify the collection “manually”, like we did above with numbers, we separate the elements by a space, as this example also shows:\n\nfor mushroom in morel destroying_angel eyelash_cup; do\n    echo \"$mushroom is an Ohio mushroom\"\ndone\n\nmorel is an Ohio mushroom\ndestroying_angel is an Ohio mushroom\neyelash_cup is an Ohio mushroom\n\n\n\n\n3.2 Looping over files with globbing\nIn practice, we rarely manually list the collection of items we want to loop over. Instead, we commonly loop over files directly using globbing:\n\nfor fastq_file in data/raw/*fastq.gz; do\n    echo \"File $fastq_file has $(wc -l < $fastq_file) lines.\"\n    # More processing...\ndone\n\n\n\n\n\n\n\nBonus: Bash arrays and looping over them\n\n\n\n\n\nBash arrays are like lists in Python or vectors in R, and can be created using parentheses ().\n\nCreate an array manually:\n$ sample_names=(zmaysA zmaysB zmaysC)\nCreate an array using command substitution:\n$ sample_files=($(cut -f 3 samples.txt))\n\n$ sample_files=($(cat fastq_files.txt))\nUsing [@], we can access all elements in the array:\n$ echo ${sample_names[@]}  # Print all elements in the array\n#> zmaysA zmaysB zmaysC\nArrays are mostly useful to loop over, and we can also use the [@] notation to loop over the elements:\n$ for sample_name in \"${sample_names[@]}\"; do\n      echo \"$sample_name\"\n    done\n#> zmaysA zmaysB zmaysC\n\n\nfor sample_name in \"${sample_names[@]}\"; do\n    echo \"Processing sample $sample_name\"\n    input_file=\"$sample_name\"_R1.fastq\n    # More processing...\ndone"
  },
  {
    "objectID": "sessions/scripting-prep.html#conditionals",
    "href": "sessions/scripting-prep.html#conditionals",
    "title": "Variables, Loops, and Conditionals",
    "section": "4 Conditionals",
    "text": "4 Conditionals\nTBA"
  },
  {
    "objectID": "sessions/shell-intro.html#tba",
    "href": "sessions/shell-intro.html#tba",
    "title": "The Unix Shell",
    "section": "1 TBA",
    "text": "1 TBA"
  },
  {
    "objectID": "sessions/workshop-intro.html#tba",
    "href": "sessions/workshop-intro.html#tba",
    "title": "Introduction to the Workshop",
    "section": "1 TBA",
    "text": "1 TBA\nHowever, given the focus of our workshop on foundational computation skills, we will not: - Be making any biological inferences - Go into detail about genomic data file types - Go into detail about specific (genomic) analyses"
  },
  {
    "objectID": "sessions/slurm.html#tba",
    "href": "sessions/slurm.html#tba",
    "title": "Submitting scripts with SLURM",
    "section": "1 TBA",
    "text": "1 TBA"
  },
  {
    "objectID": "sessions/examples.html#tba",
    "href": "sessions/examples.html#tba",
    "title": "Running example compute jobs",
    "section": "1 TBA",
    "text": "1 TBA"
  },
  {
    "objectID": "sessions/osc-intro.html#tba",
    "href": "sessions/osc-intro.html#tba",
    "title": "Intro to the Ohio Supercomputer Center (OSC)",
    "section": "1 TBA",
    "text": "1 TBA"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Command line basics  for genomic analysis at OSC",
    "section": "",
    "text": "This workshop is geared towards people who would like to get started with analyzing genomic datasets.\nIt will be taught in-person with video-linking at the Wooster and Columbus Ohio State campuses, and it is also possible to join online through Zoom. We will have an instructor at each campus: Jelmer Poelstra from the Molecular and Cellular Imaging Center (MCIC) at the Wooster campus (Selby Hall), and Mike Sovic from the Center for Applied Plant Sciences (CAPS) at the Columbus campus (Aronoff Lab).\nThe workshop will be highly hands-on and take place across three afternoons:\nWed, Aug 17 - Fri, Aug 19 (Wed & Fri: 1-4:30 pm; Thu: 12-2:30 pm with lunch provided).\n\nAnyone affiliated with The Ohio State University or Wooster USDA can attend\nAttendance is free\nNo prior experience with coding or genomic data is required\nYou will need to bring a laptop and don’t need to install anything prior to or during the workshop\nWe will work with example genomics data but if you have any, you are also welcome to bring your own data.\n\nSee below for information about the contents of the workshop and to sign up.\nFor questions, please email Jelmer."
  },
  {
    "objectID": "about.html#contents-of-the-workshop",
    "href": "about.html#contents-of-the-workshop",
    "title": "Command line basics  for genomic analysis at OSC",
    "section": "Contents of the workshop",
    "text": "Contents of the workshop\nThe focus of the workshop is on building general skills for analyzing genomics data, such as RNAseq, metabarcoding, metagenomic shotgun sequencing, or whole-genome sequencing. These skills boil down to the ability to write small shell scripts that run command-line programs and submit these scripts to a compute cluster – in our case, at the Ohio Supercomputer Center (OSC).\n\nTopics\n\nIntroduction to the Ohio Supercomputer Center (OSC)\nUsing the VS Code text editor at OSC\nIntroduction to the Unix shell (= the terminal / command line)\nBasics of shell scripts\nSoftware at OSC with modules & Conda\nSubmitting your scripts using the SLURM scheduler\nPutting it all together: practical examples of running analysis jobs at OSC\n\nThe modules will be a mixture of lectures that include “participatory live-coding” (with the instructor slowly demonstrating and participants expected to follow along for themselves) and exercises.\n\n\nSome more background\nCommand-line programs are preferred for many of the steps to analyze genomic sequencing data, such as those involving quality control, trimming or adapter removal, and assembly or mapping. Other features of such datasets are that they tend to contain a lot of data, and that many analysis steps can be done independently for each sample. It therefore pays off -or may be necessary- to run your analyses not on a laptop or desktop, but at a supercomputer like OSC.\nBeing able to run your analysis with command-line programs at OSC involves a number of skills that may seem overwhelming at first. Fortunately, learning the basics of these skills does not take a lot of time, and will enable you to be up-and-running with working on your own genomic data! Keep in mind that these days, excellent programs are available for almost any genomics analysis, so you do not need to be able to code it all up from scratch. You will just need to know how to efficiently run such programs, which is what this workshop aims to teach you."
  },
  {
    "objectID": "about.html#apply-to-attend",
    "href": "about.html#apply-to-attend",
    "title": "Command line basics  for genomic analysis at OSC",
    "section": "Apply to attend!",
    "text": "Apply to attend!\nTo apply to attend the workshop, please fill out the form below. There is no real selection procedure: we accept anyone who is at OSU/USDA and signs up before we have reached the maximum number of participants.\n\nLoading…"
  },
  {
    "objectID": "info/info.html#computer-setup",
    "href": "info/info.html#computer-setup",
    "title": "Practical Workshop Information",
    "section": "Computer Setup",
    "text": "Computer Setup\nSince we will be working entirely at the Ohio Supercomputer Center (OSC), and will be doing so through our internet browsers:\n\nYou won’t need to install anything\nAny operating system will work\nYou won’t need an especially powerful machine (though browsers, especially in combination with Zoom, can use their fair share of memory).\n\nIf you’re attending in person, you will need to bring a laptop. You can watch the presentation on a big screen in the room, which will make it easier to code along (see below). You won’t need to connect to the Zoom call.\nIf you’re attending via Zoom, we would recommend a two-monitor setup. This is because much of the time, you need to be able to simultaneously see the instructor’s screen via Zoom as well as your own browser window.\nWe’ll use this Google Doc for sharing links and code, and for non-urgent questions."
  },
  {
    "objectID": "info/info.html#locations",
    "href": "info/info.html#locations",
    "title": "Practical Workshop Information",
    "section": "Locations",
    "text": "Locations\n\nWooster: Selby Hall, room 203 (instructor: Jelmer Poelstra)\nColumbus: Aronoff Laboratory, room 104 (instructor: Mike Sovic)\nZoom: email us for the link!"
  },
  {
    "objectID": "info/info.html#miscellaneous-info",
    "href": "info/info.html#miscellaneous-info",
    "title": "Practical Workshop Information",
    "section": "Miscellaneous info",
    "text": "Miscellaneous info\n\nExpect to participate!\nThe modules will be a mixture of lectures that include “participatory live-coding” (also called “code-along”; with the instructor slowly demonstrating and participants expected to follow along for themselves) and small single-person exercises (we won’t be doing breakout rooms / groups). Therefore, be prepared to actively participate during much of the workshop!\n\n\nExample data\nWe will mainly use a set of FASTQ files from a published RNAseq experiment as example data. (But it may be worth emphasizing that the exact data type matters relatively little for the purposes of our workshop, since we focus on foundational skills and not specific genomic analyses.)\nIf you have any data yourself, you can bring it along and you should be able to experiment with it a bit in our second session on Friday afternoon. If this is a large dataset (say, >10GB), uploading it to OSC will take some time. You could try to start this after Wednesday’s sessions, when you’ve had some background on this. Alternatively, you can contact us prior to the workshop."
  },
  {
    "objectID": "sessions/vscode.html#some-tips-and-tricks",
    "href": "sessions/vscode.html#some-tips-and-tricks",
    "title": "The VS Code Text Editor",
    "section": "3 Some tips and tricks",
    "text": "3 Some tips and tricks\n\n3.1 Making use of your screen’s real estate\nSince we are using VS Code inside a browser window, we are unfortunately losing some screen space. Make sure to maximize the browser window and if you have a bookmarks bar, try to hide it (for Chrome: Ctrl/⌘+Shift+B).\n\n\n3.2 Resizing panes\nYou can resize panes (the terminal, editor, and wide sidebar) by hovering your cursor over the borders and then dragging it.\n\n\n3.3 The Command Palette\nTo access all the menu options that are available in VS Code, the so-called “Command Palette” can be handy, especially if you know what you are looking for.\nTo access the Command Palette, click  and then Command Palette or press F1 or Ctrl/⌘+Shift+P.\nFor a quick test, open the Command Palette and start typing “color theme”, and you’ll see the relevant options pop up.\n\n\n3.4 Color themes\nTo try out different color themes for the entire program, press the gear icon  and then Color Theme. (I like “Quiet Light”.)"
  },
  {
    "objectID": "sessions/workshop-intro.html#what-you-will-and-wont-learn",
    "href": "sessions/workshop-intro.html#what-you-will-and-wont-learn",
    "title": "Introduction to the Workshop",
    "section": "1 What you will and won’t learn",
    "text": "1 What you will and won’t learn\nThe focus of the workshop is on building some general skills for analyzing genomics data.\nCommand-line programs are preferred for many of the steps to analyze genomic sequencing data. Because such datasets tend to contain a lot of data, it is also preferable to run your analyses not on a laptop or desktop, but at a compute cluster like the Ohio Supercomputer Center (OSC).\nIn combination, this means that you need the following set of skills that you may not have been thought during your biology education:\n\nHaving a basic understanding of a supercomputer (compute cluster)\n\nAnd being able to:\n\nUse the Unix shell (work in a terminal)\nWrite small shell scripts\nActivate and probably install software in a Linux environment where you don’t have “admin rights”\nInstead of simply executing your scripts, submitting scripts to a “queue” and monitor and managing the resulting compute jobs.\n\nWe will teach the basics of these skills during this workshop!\nIt may be useful to point out that given this focus, we will not teach you much in the way of:\n\nDetails of genomic data file types\nDetails of specific (genomic) analyses\nMaking biological inferences from your data"
  },
  {
    "objectID": "sessions/workshop-intro.html#personal-introductions",
    "href": "sessions/workshop-intro.html#personal-introductions",
    "title": "Introduction to the Workshop",
    "section": "3 Personal introductions",
    "text": "3 Personal introductions\n\n3.1 Instructors\n\nJelmer Poelstra, Molecular and Cellular Imaging Center (MCIC), Wooster\nMike Sovic, Center for Applied Plant Sciences (CAPS), Wooster\n\n\n\n3.2 You!\nPlease very briefly introduce yourself – things you may want to mention include your name, position, department, and why you wanted to go to this workshop.\n\nAdd figure(s) showing data types & previous experience"
  },
  {
    "objectID": "sessions/workshop-intro.html#mechanics-of-a-hybrid-workshop",
    "href": "sessions/workshop-intro.html#mechanics-of-a-hybrid-workshop",
    "title": "Introduction to the Workshop",
    "section": "2 Mechanics of a hybrid workshop",
    "text": "2 Mechanics of a hybrid workshop\nWe have a slightly complicated set up with people in-person in Wooster with one instructor, in-person in Columbus with another instructor, and some people via Zoom. Some notes:\n\nThis website has all the material that we will go through during each of the modules! See the links in the schedule as well as under the top bar menus.\nIn-person participants don’t need to connect to the Zoom call (but are of course allowed to connect, if they can better see the instructor’s screen that way).\nBecause we’re not all on Zoom, we’ll use this Google Doc to share links, inpromptu code that is not on the website, and non-urgent question.\nWhenever you have a question, please feel free to interrupt and speak up, both in-person and over Zoom. Only if your question is not urgent and you don’t want to interrupt the flow, put it in the Google Doc or ask about it during a break."
  },
  {
    "objectID": "info/info.html#locations-and-links",
    "href": "info/info.html#locations-and-links",
    "title": "Practical Workshop Information",
    "section": "Locations and links",
    "text": "Locations and links\n\nWooster: Selby Hall, room 203 (instructor: Jelmer Poelstra)\nColumbus: Aronoff Laboratory, room 104 (instructor: Mike Sovic)\nZoom: email us for the link!\nGoogle Doc for sharing links and code, and for non-urgent questions"
  }
]