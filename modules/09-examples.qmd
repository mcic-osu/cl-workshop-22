---
title: "Batch Jobs in Practice"
subtitle: "Practical examples of writing shell scripts and running them as batch jobs at OSC"
pagetitle: "Batch Jobs in Practice"
highlight-style: github
number-sections: true
author:
  - Jelmer Poelstra
  - Mike Sovic
---

```{r knitr_options, echo=FALSE}
knitr::opts_chunk$set(eval = FALSE,
                      class.output = "bash-out")
```

:::{.callout-warning}
PAGE STILL UNDER CONSTRUCTION
:::

-----

<br>

## Setup

:::{.callout-note collapse="true"}
## Starting a VS Code session with an active terminal (click here)

1. Log in to OSC at <https://ondemand.osc.edu>.
2. In the blue top bar, select `Interactive Apps` and then `Code Server`.
3. In the form that appears:
   - Enter `4` or more in the box `Number of hours`
   - **To avoid having to switch folders within VS Code**,
     enter `/fs/ess/scratch/PAS2250/participants/<your-folder>` in the box `Working Directory`
     (replace `<your-folder>` by the actual name of your folder).
   - Click `Launch`.
4. On the next page,
   once the top bar of the box is green and says `Runnning`,
   click `Connect to VS Code`.
5. Open a terminal: {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.
6. In the terminal, type `bash` and press <kbd>Enter</kbd>.
7. Type `pwd` in the termain to check you are in `/fs/ess/scratch/PAS2250`.
   
   If not, click
   {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `Open Folder`
   and enter `/fs/ess/scratch/PAS2250/<your-folder>`.

:::

<br>

## A script to run FastQC

### FastQC: A program for quality control of FASTQ files 

FastQC produces visualizations and assessments of FASTQ files for statistics
such as per-base quality (below) and adapter content.

<p align="center">
<img src=img/fastqc_good.png width="70%">
</p>

<p align="center">
<img src=img/fastqc_bad.png width="70%">
</p>

### FastQC syntax

To analyze one (optionally gzipped) FASTQ file with FastQC,
the generalized syntax is:
  
```{bash}
fastqc --outdir=<output-dir> <fastq-file>
```

For instance:

```{bash}
fastqc --outdir=results/fastqc data/fastq/SRR7609467.fastq.gz
```

## A basic FastQC script

Open a new file in the `VS Code` editor
(&nbsp; {{< fa bars >}} &nbsp; => &nbsp; `File` &nbsp; => &nbsp; `New File`)
and save it as `fastqc.sh` within the newly created `scripts` dir.
  
Here is what a basic script to run FastQC non-interactively could look like:
  
```{bash}
#!/bin/bash
set -e -u -o pipefail

input_file="$1"
output_dir="$2" 

echo "Input FASTQ file:   $input_file"
echo "Output dir:         $output_dir"

fastqc --outdir="$output_dir" "$input_file"

echo "Done with script $0"
```

But we'll add two things to be able to run this script smoothly as a batch job
at OSC:

- Loading the program:

  ```{bash}
  module load fastqc
  ```
  
- Adding `sbatch` options

  ```{bash}
  #SBATCH --account=PAS2250
  #SBATCH --time=15
  #SBATCH --output=slurm-fastqc-%j.out
  ```

Finally, let's also add another useful feature &mdash;
a line to make the output directory in case it doesn't yet exist:

```{bash}
mkdir -p "$output_dir"
```

:::{.callout-tip}
## The `-p` option for `mkdir`
Explain
:::

Our script now looks as follows:

```{bash}
#!/bin/bash
#SBATCH --account=PAS2250
#SBATCH --time=15
#SBATCH --output=slurm-fastqc-%j.out
  
set -e -u -o pipefail

module load fastqc

input_file="$1"
output_dir="$2" 

echo "Input FASTQ file:   $input_file"
echo "Output dir:         $output_dir"

mkdir -p "$output_dir"

fastqc --outdir="$output_dir" "$input_file"

echo "Done with script $0"
```

### Running our script

```{bash}
sbatch scripts/fastqc.sh data/fastq/SRR7609467.fastq.gz results/fastqc
```

:::{.bash-out}
Submitted batch job 2451088
:::


:::{.callout-caution collapse="true"}
### Where does our output go?

- Output that would have been printed to screen if had run the script directly:
  in the Slurm log file `slurm-fastqc-<job-nr>.out`
  
- FastQC's main output files (one HTML and one ZIP per file):
  to whichever output directory we specified.
:::

- Let's take a look at the queue - FINISH

- Let's take a look at the Slurm log file - FINISH

- Let's take a look at the FastQC output files in `results/fastqc` - FINISH

<br>

### A "workflow" script

So far, we've been typing our commands to run or submit scripts directly
in the terminal.

It's better to save these sorts of commands.
Additionally, now that we will start writing loops to submit many jobs at a time:
loops are not that easy to directly type in the terminal to begin with.

Therefore, we will now create a new file for the purpose of documenting the
steps that we are taking and the scripts that we are submitting.

It's easiest to also save this as a shell script (`.sh`) extension,
even though it is not like the other scripts &mdash; for instance,
once we've added multiple batch job steps, we won't be able to just _run_ the
script as is, without adding all sorts of bells and whistles.

:::{.callout-caution collapse="true"}
## Why wouldn't it work to just run such a "script"?
FINISH
:::

I usually call a file/script like this `workflow.sh`, as it's meant to....

So let's go ahead and open a new text file and then saving it as `workflow.sh`.

### Looping over all our files

The script that we wrote above will run FastQC for a single FASTQ file.
Now, we will write a loop that iterates over all of our FASTQ files
(only 8 in this case, but could be 100s just the same),
and **submits a batch job for each of them.**

Let's type the following into our `workflow.sh` script,
and then copy-and-paste it into the terminal to run the loop:

```{bash}
for fastq_file in data/fastq/*fastq.gz; do
    scripts/fastqc.sh "$fastq_file" results/fastqc
done
```

:::{.bash-out}
Submitted batch job 2451089  
Submitted batch job 2451090  
Submitted batch job 2451091  
Submitted batch job 2451092   
Submitted batch job 2451093  
Submitted batch job 2451094  
Submitted batch job 2451095  
Submitted batch job 2451096
:::

:::{.callout-tip}
In the interest of space, we are not adding many `echo` statements etc... 
:::

<br><br>

------

------

:::{.callout-tip}
## Keyboard shortcut to run shell commands from the editor

To add a keyboard shortcut that will send code selected in the editor pane
to the terminal
(such that you don't have to copy and paste):

- Click the &nbsp; {{< fa cog >}} &nbsp; (bottom-left) => `Keyboard Shortcuts`.

- Find `Terminal: Run Selected Text in Active Terminal`, click on it,
  then add a shortcut, e.g. <kbd>Ctrl</kbd>+<kbd>Enter</kbd>.
:::
