---
title: "Variables and Loops"
pagetitle: "Variables and Loops"
highlight-style: github
number-sections: true
knitr:
  opts_knit:
    root.dir: "sandbox"
---

```{r knitr_options, echo=FALSE}
knitr::opts_chunk$set(eval = FALSE,
                      class.output = "bash-out")
```

-----

:::{.callout-warning}
## Under Construction
PAGE STILL UNDER CONSTRUCTION
:::

In this module, we will cover two topics that are good to know about
before you start writing and running shell scripts:

- Using **variables** will allow you to run scripts flexibly,
  with different input files and settings 

- **`for` loops** will allow you to repeat operations &mdash;
  specifically, we will later use them to submit many scripts at the same time,
  one per input file or sample.

<br>

## Setup

:::{.callout-note collapse="true"}
## Starting a VS Code session with an active terminal (click here)

1. Log in to OSC at <https://ondemand.osc.edu>.
2. In the blue top bar, select `Interactive Apps` and then `Code Server`.
3. In the form that appears:
   - Enter `3` in the box `Number of hours`
   - Enter `/fs/ess/scratch/PAS2250` in the box `Working Directory`
   - Click `Launch`.
4. On the next page,
   once the top bar of the box is green and says `Runnning`,
   click `Connect to VS Code`.
5. Open a terminal: {{< fa bars >}} &nbsp; => `Terminal` => `New Terminal`.
6. In the terminal, type `bash` and press <kbd>Enter</kbd>.

:::

<br>

## Variables

In programming, we use **variables** for things that:

  - We refer to repeatedly and/or
  - Are subject to change.

These tend to be _settings_ like the paths to input and output files,
and parameter values for programs.

### Assigning and referencing variables

**To _assign_ a value to a variable in Bash** (in short: to assign a variable),
use the syntax `variable=value`.
For example:

```{bash}
# Assign the value "low" to the variable "treatment":
treatment=low

# Assign the value "200" to the variable "nlines":
nlines=200
```

:::{.callout-warning}
## Space-sensitive

Be aware that there can be no spaces around the equals sign (`=`)!

:::

**To _reference_ a variable** (i.e., to access its value),
you need to put a dollar sign `$` in front of its name.
We'll use the `echo` command to review the values that our variables contain:

```{bash, echo=TRUE, eval=FALSE}
echo $treatment
```

```{bash, echo=FALSE, eval=TRUE}
treatment=low
echo $treatment
```

```{bash, echo=TRUE, eval=FALSE}
echo $nlines
```

```{bash, echo=FALSE, eval=TRUE}
nlines=200

echo $nlines
```

Conveniently, we can directly use variables in lots of contexts,
**as if we had instead typed their _values_**:

```{bash, eval=TRUE}
ls_options="-lh"

ls $ls_options data/meta
```

```{bash, eval=TRUE}
input_file=data/fastq/SRR7609467.fastq.gz

ls -lh $input_file 
```

### Rules for naming variables

Variable names:

- **Can** contain letters, numbers, and underscores
- **Cannot** contain spaces, periods, or other special symbols
- **Cannot start** with a number

### Command substitution

If you want to store the result of a command in a variable,
you can use a construct called "**command substitution**"
by wrapping the command inside `$()`:

```{bash, eval=TRUE}
# (date +%F will return the date in YYYY-MM-DD format)
today=$(date +%F)

# Create a file with our $today variable:
touch README_$today.txt

# Check the name of our newly created file:
ls README_*
```

```{bash, eval=TRUE}
# Define a filename that we'll use in the next few commands:
input_file=data/meta/meta.tsv

# `wc -l` will count the number of lines
# Using `<` (input redirection) is a trick to avoid the filename from being printed 
nlines=$(wc -l < $input_file)

# We can directly use the variables in our quoted echo statement:
echo "The file $input_file has $nlines lines"
```

Command substitution can for instance be useful when you want your script
to report some results,
or when a next step in the script depends on a previous result.

### Environment variables

There are also **predefined variables** in the Unix shell:
that is, variables that exist in your environment by default.
These so-called "environment variables" are always spelled in all-caps:

```{bash, eval=TRUE}
# Environment variable $USER contains your user name 
echo $USER
```

```{bash, eval=TRUE}
# Environment variable $HOME contains the path to your home directory
echo $HOME
```

Environment variables can provide useful information.
We'll see them again when we talk about the Slurm compute job scheduler.

### Quoting variables

Above, we learned that a variable name cannot contain spaces.
But what happens if our variable's _value_ contains spaces?

First off, when we try to **assign** the variable without quotes,
we get an error:

```{bash, eval=FALSE, error=TRUE}
today=Thu, Aug 18
```

:::{.bash-out}

Aug: command not found

:::

But it works when we quote (with _double_ quotes, `"..."`)
the entire string that makes up the value:

```{bash, eval=TRUE}
today="Thu, Aug 18"
echo $today
```

Now, let's try to **reference** this variable:

```{bash, eval=FALSE}
touch README2_$today.txt
ls README2_*
```

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
touch README2_$today.txt
ls README2_*
```

:::{.callout-caution collapse="true"}
## What went wrong here? How many files were created?

The shell performed so-called _field splitting_ using a space as a separator,
splitting the value into three separate units &ndash;
as a result, three files were created:
`README2_Thu,` (listed above), as well as `Aug` and `18.txt`.

The following code will list all these three files:

```{bash, eval=TRUE}
# `ls -t` will sort by last-modified date, and `head -n 3` prints the top 3
# Therefore, this will print the last 3 files that were created/modified
ls -t | head -n 3
```

:::

Similar to what we had to do when assigning the variable,
our problems can be avoided by **quoting the variable** when we reference it:

```{bash, eval=FALSE}
touch README3_"$today".txt
ls README3_*
```

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
touch README3_"$today".txt
ls README3_*
```

Another issue we can run into when we don't quote variables
is that we can't explicitly define where a variable name ends
within a longer string of text:

```{bash, eval=FALSE}
echo README_$today_final.txt
```

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
echo README_$today_final.txt
```

:::{.callout-caution collapse="true"}
## What went wrong here?

- Following a `$`, the shell will stop interpreting characters as being part
  of the variable name only when it encounters a character that cannot be
  part of a variable name, such as a space or a period.

- Since variable names _can_ contain underscores, it will look for the variable
  `$today_final`, which does not exist.
  
- Importantly, the shell **does not error out** when you reference a
  non-existing variable -- it basically ignores it,
  such that `README_$today_final.txt` becomes `README_.txt`,
  as if we hadn't referenced any variable.

:::

Quoting solves this issue, too:

```{bash, eval=FALSE}
echo README_"$today"_final.txt
```

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
echo README_"$today"_final.txt
```

:::{.callout-note collapse="true"}
## More on quoting -- and double vs. single quotes

By double-quoting a variable,
we are essentially escaping (or "turning off")
the default special meaning of the _space as a separator_,
and are asking the shell to interpret it as a _literal space_.

Similarly, we are escaping other "special characters",
such as globbing wildcards, with double quotes. Compare:

```{bash, eval=TRUE}
echo *
```

```{bash, eval=TRUE}
echo "*"
```

However, as we also saw above,
double quotes _do not_ turn off the special meaning of `$`
(i.e., denoting a string as a variable):

```{bash, eval=FALSE, echo=TRUE}
echo "$today"
```

```{bash, eval=TRUE, echo=FALSE}
today="Thu, Aug 18"
echo "$today"
```

...but _single quotes_ will:

```{bash, eval=TRUE, echo=TRUE}
echo '$today'
```

:::

All in all, **it is good practice to quote variables** when you reference them:
it never hurts, and avoids unexpected surprises.

<br>

## For loops

Loops are a universal element of programming languages,
and are extremely useful to repeat operations,
such as when you want to run the same script or command for multiple files.

**Here, we'll only cover what is by far the most common type of loop:
the `for` loop.**

`for` loops _iterate_ over a collection, such as a list of files:
that is, they allow you to perform one or more actions for each element in the collection, one element at a time.

### `for` loop syntax and mechanics

Let's see a first example, where our collection is just a very short
list of numbers (1, 2, and 3):

```{bash, eval=TRUE}
for a_number in 1 2 3; do
    echo "In this iteration of the loop, the number is $a_number"
    echo "--------"
done
```

`for` loops contain the following mandatory keywords:

| Keyword   | Purpose	
|-----------|-------------
| `for`	    | After `for`, we set the variable name	
| `in`	    | After `in`, we specify the collection we are looping over	
| `do`	    | After `do`, we have one ore more lines specifying what to do with each item	
| `done`	  | Tells the shell we are done with the loop


:::{.callout-note collapse="true"}
## Why the semicolon `;` before `do`?

A semicolon separates two commands written on a single line --
for instance, instead of:

```{bash, eval=FALSE}
mkdir results
cd results
```

...you could equivalently type:

```{bash, eval=FALSE}
mkdir results; cd results
```

The `;` in the `for` loop syntax has the same function, and as such,
an alternative way to format a `for` loop is:

```{bash, eval=FALSE}
for a_number in 1 2 3
do
    echo "In this iteration of the loop, the number is $a_number"
done
```

But that's one line longer and a bit awkwardly asymmetric.

:::

It is important to realize that the loop runs sequentially for each item
in the collection, and will therefore run as many times as there are items
in the collection.

The following example, where we let the computer sleep for 1 second
before printing the date and time with the `date` command,
demonstrates that the loop is being executed sequentially:

```{bash, eval=TRUE}
for a_number in 1 2 3; do
    echo "In this iteration of the loop, the number is $a_number"
    #sleep 1s          # Let the computer sleep for 1 second
    date              # Print the date and time
    echo "--------"
done
```

The aspect that is perhaps most difficult to understand is that in each iteration
of the loop, one element in the collection (in the example above, either `1`,
`2`, or `3`) **is being assigned** to the variable specified after `for`
(in the example above, `a_number`).

When we specify the collection "manually", like we did above with numbers,
we separate the elements by a space, as this example also shows:

```{bash, eval=TRUE}
for mushroom in morel destroying_angel eyelash_cup; do
    echo "$mushroom is an Ohio mushroom"
done
```

### Looping over files with globbing

In practice, we rarely manually list the collection of items we want to
loop over.
Instead, we commonly **loop over files** directly using _globbing_: 

```{bash, eval=FALSE}
# We make sure we only select gzipped FASTQ files using the `*fastq.gz` glob
for fastq_file in data/raw/*fastq.gz; do
    echo "File $fastq_file has $(wc -l < $fastq_file) lines."
    # More processing...
done
```

If needed,
you can use your globbing / wild card skills to narrow down the file selection:

```{bash, eval=FALSE}
# Perhaps we only want to select R1 files (forward reads): 
for fastq_file in data/raw/*R1*fastq.gz; do
    # Some file processing...
done

# Or only filenames starting with A or B:
for fastq_file in data/raw/[AB]*fastq.gz; do
    # Some file processing...
done
```

:::{.callout-note  collapse="true"}
## Alternatives to looping with a glob

With genomics data,
the routine of looping over an entire directory of files,
or selections made with simple globbing patterns,
should serve you very well.

But in some cases,
you may want to iterate only over a specific list of filenames
(or partial filenames such as sample IDs)
that represent a complex selection.

- If this is a short list, you could directly specify it in the loop:

  ```{bash, eval=FALSE}
  for sample in A1 B6 D3; do
      R1=data/fastq/"$sample"_R1.fastq.gz
      R2=data/fastq/"$sample"_R2.fastq.gz
      # Some file processing...
  done
  ```

- If it is a longer list, you could create a simple text file with one line
  per sample ID / filename, and use command substitution as follows:

  ```{bash, eval=FALSE}
  for fastq_file in $(cat file_of_filenames.txt); do
      # Some file processing...
  done
  ```

(In cases like this, _Bash arrays_
(basically, variables that consist of multiple values, like a vector in R)
or _`while` loops_ may provide more elegant solutions,
but those are outside the scope of this introduction.)

:::
