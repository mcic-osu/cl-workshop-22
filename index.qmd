---
title: "Command line basics <br> for genomic analysis at OSC"
subtitle: "A workshop by the MCIC & CAPS on August 17 - 19, 2022."
---

## Practicalities

This workshop will be taught in-person with video-linking at the Wooster and
Columbus Ohio State campuses, and it is also possible to join online through Zoom.
We will have an instructor at each of the two campuses: 
Jelmer Poelstra from the Molecular and Cellular Imaging Center (MCIC) at the
Wooster campus, and Mike Sovic from the Center for Applied Plant Sciences (CAPS)
at the Columbus campus.

The workshop will be highly hands-on and take place across three afternoons:  
**Wed, Aug 17 - Fri, Aug 19** (Wed & Fri: 1-4:30 pm, Thu: 12-2:30 pm).

- Anyone affiliated with The Ohio State University or Wooster USDA is welcome to sign up
- Attendance is free
- No prior experience with coding or genomic data is required
- You will only need to bring a laptop and don't need to install anything
  prior to or during the workshop

See below for information about the contents of the workshop and to sign up.  
For questions, please [email Jelmer](mailto:poelstra.1@osu.edu).

## Contents of the workshop

**The workshop is geared towards people who would like to get started**
**with analyzing genomic datasets.**

The focus of the workshop is not on any specific type of data or analysis,
but on general skills for analyzing any genomics dataset,
such as from _RNAseq_, _metabarcoding_, _metagenomic shotgun sequencing_,
or _whole-genome sequencing_.
These skills boil down to the ability to write small scripts that run
command-line programs, and submit these scripts to a remote computer --
in our case, the Ohio Supercomputer Center (OSC).

### Modules of the workshop

- Introduction to the Ohio Supercomputer Center (OSC)
- Using the `VS Code` text editor at OSC
- Introduction to the Unix shell (= the terminal / command line)
- Basics of shell scripts
- Software at OSC with _modules_ & `Conda`
- Submitting your scripts using the `SLURM` scheduler
- Putting it all together: practical examples of running analysis jobs at OSC

The modules will be a mixture of lectures that include "participatory live-coding"
(i.e. with the instructor slowly demonstrating and participants expected to follow
along for themselves) and exercises.

We will work with example genomics data but if you have any,
you are also welcome to bring your own data to put your newly learned skills
in practice on the last afternoon.

### Some more background

When doing any kind of large-scale sequencing experiment,
you will typically receive the raw sequencing data.
Many of the steps to analyze this data, such as those involving quality control,
trimming or adapter removal, and assembly or mapping,
are best performed using command-line programs.
Additionally, _a lot_ of data tends to be involved,
and many analysis steps can be done independently for each sample.
Therefore, it pays off -or may simply be necessary- to run your analyses not
on a laptop or desktop, but at a supercomputer like OSC.

Being able to run your analysis at OSC involves a number of skills that may seem
overwhelming at first: working in a terminal (the Unix shell);
writing scripts to run programs with a command-line interface;
submitting scripts to a "queue" & managing the resulting compute jobs;
accessing if not also installing software;
and having some understanding of the supercomputer.

Fortunately, learning the basics of these skills,
so that you can be up-and-running with working on your own genomic data,
does not take a lot of time.
Keep in mind that these days,
excellent programs are available for almost any genomics analysis,
so you do not need to be able to code it all up from scratch.
You will just need to know how to efficiently run such programs from the command line,
which is what this workshop aims to teach you.

## Sign up!

To sign up, please fill out the form below:

<iframe src="https://docs.google.com/forms/d/e/1FAIpQLScEyRqHKPZXteXE-1nDSz2ahJYK3PwxN47bsIx2XkGSj_wB9A/viewform?embedded=true" width="800" height="1847" frameborder="0" marginheight="0" marginwidth="0">Loadingâ€¦</iframe>

